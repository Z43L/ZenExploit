#ifndef MEMORY_H
#define MEMORY_H

#include <stdint.h>
#include <stddef.h>

// Protección de memoria
typedef enum {
    PROT_NONE = 0,  // Sin protección
    PROT_READ = 1,  // Solo lectura
    PROT_WRITE = 2, // Solo escritura
    PROT_EXEC = 4   // Ejecutable
} MemoryProtection;

// Funciones de gestión de memoria
void* allocate_memory(size_t size, MemoryProtection protection); 
void free_memory(void* ptr); 
void change_memory_protection(void* ptr, MemoryProtection protection);
void* find_memory_pattern(void* start_address, size_t size, const void* pattern, size_t pattern_size); 

// Aritmética de punteros avanzada (ten cuidado con su uso)
void* add_to_pointer(void* ptr, ptrdiff_t offset);
void* subtract_from_pointer(void* ptr, ptrdiff_t offset);

// Macros para simplificar las operaciones de memoria
#define READ_BYTE(ptr)   (*(uint8_t*)(ptr))
#define READ_WORD(ptr)   (*(uint16_t*)(ptr))
#define READ_DWORD(ptr)  (*(uint32_t*)(ptr))
#define READ_QWORD(ptr)  (*(uint64_t*)(ptr))

#define WRITE_BYTE(ptr, value)   (*(uint8_t*)(ptr) = (value))
#define WRITE_WORD(ptr, value)   (*(uint16_t*)(ptr) = (value))
#define WRITE_DWORD(ptr, value)  (*(uint32_t*)(ptr) = (value))
#define WRITE_QWORD(ptr, value)  (*(uint64_t*)(ptr) = (value))

#endif // MEMORY_H